package chess;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Objects;

/**
 * A chessboard that can hold and rearrange chess pieces.
 * <p>
 * Note: You can add to this class, but you may not alter
 * signature of the existing methods.
 */
public class ChessBoard {

    private ChessPiece[][] board;

    public ChessBoard() {
        board = new ChessPiece[8][8];
    }

    /**
     * Adds a chess piece to the chessboard
     *
     * @param position where to add the piece to
     * @param piece    the piece to add
     */
    public void addPiece(ChessPosition position, ChessPiece piece) {
        board[position.getRow() - 1][position.getColumn() - 1] = piece; // Add the piece on the board
    }

    // Helper function to remove a piece, primarily for moving
    public void removePiece(ChessPosition position) {
        board[position.getRow() - 1][position.getColumn() - 1] = null;
    }

    // Helper function to allow for searching the board
    public Collection<ChessPosition> getAllPositions() {
        Collection<ChessPosition> positions = new ArrayList<>();
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                positions.add(new ChessPosition(row + 1, col + 1));
            }
        }
        return positions;
    }

    /**
     * Gets a chess piece on the chessboard
     *
     * @param position The position to get the piece from
     * @return Either the piece at the position, or null if no piece is at that
     * position
     */
    public ChessPiece getPiece(ChessPosition position) {
        return board[position.getRow() - 1][position.getColumn() - 1];
    }



    /**
     * Sets the board to the default starting board
     * (How the game of chess normally starts)
     */
    public void resetBoard() {
        board = new ChessPiece[8][8]; //Clears anything on board

        for (ChessGame.TeamColor teamColor : ChessGame.TeamColor.values()) {
            System.out.println("Adding pieces for " + teamColor);

            int pawnRow = (teamColor == ChessGame.TeamColor.WHITE) ? 2 : 7;
            int pieceRow = (teamColor == ChessGame.TeamColor.WHITE) ? 1 : 8;
            // Pawns
            for (int col = 0; col < 8; col++) {
                addPiece(new ChessPosition(pawnRow, col + 1), new ChessPiece(teamColor, ChessPiece.PieceType.PAWN));
            }

            // Rooks
            addPiece(new ChessPosition(pieceRow, 1), new ChessPiece(teamColor, ChessPiece.PieceType.ROOK));
            addPiece(new ChessPosition(pieceRow, 8), new ChessPiece(teamColor, ChessPiece.PieceType.ROOK));

            // Knights
            addPiece(new ChessPosition(pieceRow, 2), new ChessPiece(teamColor, ChessPiece.PieceType.KNIGHT));
            addPiece(new ChessPosition(pieceRow, 7), new ChessPiece(teamColor, ChessPiece.PieceType.KNIGHT));

            // Bishops
            addPiece(new ChessPosition(pieceRow, 3), new ChessPiece(teamColor, ChessPiece.PieceType.BISHOP));
            addPiece(new ChessPosition(pieceRow, 6), new ChessPiece(teamColor, ChessPiece.PieceType.BISHOP));

            // Royalty
            addPiece(new ChessPosition(pieceRow, 4), new ChessPiece(teamColor, ChessPiece.PieceType.QUEEN));
            addPiece(new ChessPosition(pieceRow, 5), new ChessPiece(teamColor, ChessPiece.PieceType.KING));
        }
    }

    





    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChessBoard that = (ChessBoard) o;
        return Objects.deepEquals(board, that.board);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(board);
    }
}
