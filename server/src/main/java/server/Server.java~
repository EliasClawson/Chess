package server;

import spark.Spark;
import service.UserService;
import service.GameService;
import service.ClearService;
import dataaccess.UserDAO;
import dataaccess.GameDAO;
import dataaccess.AuthDAO;
import dataaccess.DatabaseManager;
import dataaccess.DataAccessException;
import spark.Spark;
import server.websocket.GameWebSocket;



public class Server {
    public int run(int desiredPort) {
        Spark.stop();
        try { Thread.sleep(500); } catch (InterruptedException ignored) {}

        Spark.port(desiredPort);

        // ✅ Register the WebSocket handler using Spark's Jetty
        Spark.webSocket("/ws", GameWebSocket.class);

        // Set up database
        try {
            DatabaseManager.createDatabase();
        } catch (DataAccessException e) {
            e.printStackTrace();
        }

        try (var conn = DatabaseManager.getConnection()) {
            try (var stmt = conn.createStatement()) {
                stmt.executeUpdate("""
                CREATE TABLE IF NOT EXISTS user (
                    username VARCHAR(255) NOT NULL PRIMARY KEY,
                    password VARCHAR(255) NOT NULL,
                    email VARCHAR(255) NOT NULL
                )""");
                stmt.executeUpdate("""
                CREATE TABLE IF NOT EXISTS game (
                    gameID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                    whiteUsername VARCHAR(255),
                    blackUsername VARCHAR(255),
                    gameName VARCHAR(255),
                    gameState TEXT
                )""");
                stmt.executeUpdate("""
                CREATE TABLE IF NOT EXISTS auth (
                    authToken VARCHAR(255) NOT NULL PRIMARY KEY,
                    username VARCHAR(255) NOT NULL
                )""");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        // DAOs and services
        UserDAO userDAO = new UserDAO();
        GameDAO gameDAO = new GameDAO();
        AuthDAO authDAO = new AuthDAO();

        UserService userService = new UserService(userDAO, authDAO);
        GameService gameService = new GameService(gameDAO, authDAO);
        ClearService clearService = new ClearService(userDAO, gameDAO, authDAO);

        // Static file:
        Spark.staticFileLocation("/public");

        // ✅ HTTP endpoints
        Spark.delete("/db", (req, res) -> new ClearHandler(clearService).handleRequest(req, res));
        Spark.post("/user", (req, res) -> new UserHandler(userService).handleRegister(req, res));
        Spark.post("/session", (req, res) -> new UserHandler(userService).handleLogin(req, res));
        Spark.delete("/session", (req, res) -> new UserHandler(userService).handleLogout(req, res));
        Spark.get("/game", (req, res) -> new GameHandler(gameService).handleListGames(req, res));
        Spark.post("/game", (req, res) -> new GameHandler(gameService).handleCreateGame(req, res));
        Spark.put("/game", (req, res) -> new GameHandler(gameService).handleJoinGame(req, res));
        Spark.get("/game/state", (req, res) -> new GameHandler(gameService).handleGetGameState(req, res));
        Spark.delete("/game/leave", (req, res) -> new GameHandler(gameService).handleLeaveGame(req, res));
        Spark.delete("/game/resign", (req, res) -> new GameHandler(gameService).handleResignGame(req, res));
        Spark.get("/game/fullstate", (req, res) -> new GameHandler(gameService).handleGetFullGameState(req, res));

        Spark.init();
        Spark.awaitInitialization();

        System.out.println("✅ Server started on port " + Spark.port() + " with WebSocket on /ws");
        return Spark.port();
    }

    public void stop() {
        Spark.stop();
    }
}
